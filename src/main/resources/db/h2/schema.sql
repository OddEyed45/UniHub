DROP TABLE vet_specialties IF EXISTS;
DROP TABLE vets IF EXISTS;
DROP TABLE specialties IF EXISTS;
DROP TABLE visits IF EXISTS;
DROP TABLE pets IF EXISTS;
DROP TABLE types IF EXISTS;
DROP TABLE owners IF EXISTS;
DROP TABLE students IF EXISTS;
DROP TABLE courses IF EXISTS;
DROP TABLE notes IF EXISTS;
DROP TABLE assignments IF EXISTS;

CREATE TABLE vets (
  id         INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  first_name VARCHAR(30),
  last_name  VARCHAR(30)
);
CREATE INDEX vets_last_name ON vets (last_name);

CREATE TABLE specialties (
  id   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name VARCHAR(80)
);
CREATE INDEX specialties_name ON specialties (name);

CREATE TABLE vet_specialties (
  vet_id       INTEGER NOT NULL,
  specialty_id INTEGER NOT NULL
);
ALTER TABLE vet_specialties ADD CONSTRAINT fk_vet_specialties_vets FOREIGN KEY (vet_id) REFERENCES vets (id);
ALTER TABLE vet_specialties ADD CONSTRAINT fk_vet_specialties_specialties FOREIGN KEY (specialty_id) REFERENCES specialties (id);

CREATE TABLE types (
  id   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name VARCHAR(80)
);
CREATE INDEX types_name ON types (name);

CREATE TABLE owners (
  id         INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  first_name VARCHAR(30),
  last_name  VARCHAR_IGNORECASE(30),
  email    VARCHAR(255),
  city       VARCHAR(80),
  telephone  VARCHAR(20)
);
CREATE INDEX owners_last_name ON owners (last_name);

CREATE TABLE pets (
  id         INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name       VARCHAR(30),
  birth_date DATE,
  type_id    INTEGER NOT NULL,
  owner_id   INTEGER
);
ALTER TABLE pets ADD CONSTRAINT fk_pets_owners FOREIGN KEY (owner_id) REFERENCES owners (id);
ALTER TABLE pets ADD CONSTRAINT fk_pets_types FOREIGN KEY (type_id) REFERENCES types (id);
CREATE INDEX pets_name ON pets (name);

CREATE TABLE visits (
  id          INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  pet_id      INTEGER,
  visit_date  DATE,
  description VARCHAR(255)
);
ALTER TABLE visits ADD CONSTRAINT fk_visits_pets FOREIGN KEY (pet_id) REFERENCES pets (id);
CREATE INDEX visits_pet_id ON visits (pet_id);

CREATE TABLE students (
                      id         INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                      first_name VARCHAR(30),
                      last_name  VARCHAR_IGNORECASE(30),
                      email    VARCHAR(255),
                      telephone  VARCHAR(20)
);
CREATE INDEX students_last_name ON students (last_name);

CREATE TABLE courses (
                    id         INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    name       VARCHAR(30),
                    professor       VARCHAR(30),
                    location       VARCHAR(30),
                    time       VARCHAR(30),
                    student_id   INTEGER
);
ALTER TABLE courses ADD CONSTRAINT fk_courses_students FOREIGN KEY (student_id) REFERENCES students (id);
CREATE INDEX courses_name ON courses (name);

CREATE TABLE notes (
                    id         INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    title       VARCHAR(30),
                    date        DATE,
                    notes       VARCHAR(512),
                    student_id   INTEGER
);
ALTER TABLE notes ADD CONSTRAINT fk_notes_students FOREIGN KEY (student_id) REFERENCES students (id);
CREATE INDEX notes_name ON notes (title);

CREATE TABLE assignments (
                    id         INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    name       VARCHAR(30),
                    due_date DATE,
                    category       VARCHAR(30),
                    status       VARCHAR(30),
                    student_id   INTEGER
);
ALTER TABLE assignments ADD CONSTRAINT fk_assignments_students FOREIGN KEY (student_id) REFERENCES students (id);
CREATE INDEX assignments_name ON assignments (name);
